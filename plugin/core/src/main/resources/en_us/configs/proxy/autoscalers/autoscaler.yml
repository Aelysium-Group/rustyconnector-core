#############################################################
#|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
#                     Elastic Autoscaler                    #
#                                                           #
#               ----------------------------                #
#                                                           #
# | Autoscalers hook directly into your Kubernetes instance #
# | to allow your families to dynamically resize the number #
# | of servers they use to handle different                 #
# | influxes of players.                                    #
#                                                           #
# | If you assign the same autoscaler to multiple families  #
# | They will all follow the rules of that one autoscaler.  #
#                                                           #
# | An elastic autoscaler will dynamically adjust server    #
# | volumes based on player influxes.                       #
#                                                           #
#               ----------------------------                #
#                                                           #
#|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
#############################################################
#
# Is this autoscaler enabled?
# If false, the family will not scale at all.
#
enabled: false

helm-chart: "itzg/minecraft"



#
# The absolute max number of pods that this auto-scaler is allowed to generate.
# The auto-scaler is never allowed to generate more pods than this number.
#
max-pods: 10



#
# The reactive scaling module observe player activity in the family and reactively generates or degenerates MCLoaders based on player activity.
# Reactive takes action AFTER player influxes have occurred.
#
reactive:
    enabled: false

    generation:
        #
        # The ratio of players to available player slots (soft-cap) in this family.
        # If the ratio is greater than or equal to this number. New pods will be generated.
        #
        ratio: 0.8

        #
        # The amount of time to wait, after `ratio` has been reached, before generating new MCLoaders.
        # If `ratio` is no-longer valid before delay is over, nothing will happen.
        #
        # This value is a Liquid Timestamp.
        # You can set it to be "INSTANT" for no delay.
        #
        delay: INSTANT

        #
        # The number of MCLoaders to generate once `delay` has successfully elapsed.
        #
        count: 1

    degeneration:
        #
        # The ratio of players to available player slots (soft-cap) in a specific MCLoader.
        # If the ratio is less than or equal to this number. The MCLoader will be degenerated.
        #
        ratio: 0.0

        #
        # The amount of time to wait, after `ratio` has been reached, before degenerating the MCLoader.
        # If `ratio` is no-longer valid before delay is over, nothing will happen.
        #
        # This value is a Liquid Timestamp.
        # You can set it to be "INSTANT" for no delay.
        #
        delay: 1m



############################################################
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
#                   Proactive Algorithm                    #
#                                                          #
#               ---------------------------                #
#                                                          #
# | The algorithm to use for handling proactive scaling.   #
# | Based on the value defined here, you can configure     #
# | the specific algorithm futher down.                    #
#                                                          #
#  ⚫ NONE                                                 #
#  ⚫ SCHEDULED                                            #
#  ⚫ PREDICTIVE                                           #
#                                                          #
#               ---------------------------                #
#                                                          #
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||#
############################################################
algorithm: "NONE"



#
# The scheduled scaling module generates or degenerates MCLoaders based on timespans.
# Scheduled takes action AT SPECIFIC TIMES regardless of actual player counts.
#
scheduled:
    #
    # The absolute start time of a timespan.
    # The syntax is: `every [DAY/MONTH/YEAR] at [HOUR/DAY/MONTH <number> | IMMEDIATELY] `
    # <number> is not an index. The number 1 is the first unit in the list. If you want to start as soon as the new DAY/MONTH/YEAR starts. Set the value to `IMMEDIATELY`.
    #
    # You must make sure that your unit offset (`at [HOUR/DAY/MONTH] <number>`) is not greater than the maximum that your unit start (`every [DAY/MONTH/YEAR]`) can be.
    #
    start: every MONTH at IMMEDIATELY

    #
    # MCLoaders will be actively created and deleted based on the current time.
    #
    timespans: []



#
# The predictive scaling module collects telemetry data of player influxes on this family and attempts to generate or degenerate MCLoaders based on expected player influxes.
# Predictive takes action BEFORE player influxes are expected.
#
predictive:
    #
    # For far back should we store telemetry data for?
    #
    keep-telemetry-for: 1 YEAR